

3- 基础命令详解  
   a. 初始化仓库(git init)      
   b. 克隆远程仓库(git clone)       
   c. 添加文件到暂存区(git add)         
   d. 执行提交操作(git commit)         
   e. 查看git状态(git status)           
   f. 查看项目历史记录(git log)           


## 基础命令详解

在使用 `git` 进行版本控制管理时，掌握一些基础命令是非常重要的。这些操作包括创建一个本地仓库、克隆远程代码库以及追踪更改和提交这些变更到本地仓库。

### a. 初始化仓库 (`git init`)

初始化一个本地仓库可以让你开始在一个项目中使用 `git` 的全部功能进行版本管理。当你在文件夹上执行此命令后，`git` 会自动创建一个名为`.git`（这是一个隐藏目录）的子目录来存放所有相关的对象、引用和钩子。

**示例：**
```sh
$ mkdir myapp # 创建项目名称为myapp。
$ cd ./myapp # 切换到本地新建的工作路径中
$ git init # 初始化并创建一个空的Git仓库，初始化后的命令状态如下：
Initialized empty Git repository in ./.git/
```

### b. 克隆远程仓库 (`git clone`)

当你需要添加一个已存在的项目至你的本地项目库时，请克隆该远程服务器上的代码；此功能将完整的复制这个已存在 `Remote Repository（远程仓库）` 所有数据。执行 `git clone` 命令后，你需要在本机指定的路径进行操作，并会自动初始化该项目为 Git 仓库。

**示例：**
```sh
$ git clone https://github.com/user/repo.git # 克隆代码库至本地。
```

### c. 添加文件到暂存区 (`git add`)

添加新文件到已存在的版本控制系统（如 `git` 的本地仓库）需要使用 `git add` 命令。你需要向本地仓库发送要追踪的修改记录，然后在提交时保存所有这些文件。

**示例：**
```sh
$ git add . # 向暂存区写入所有更改过的文件。
```

对于特定文件，请提供完整的文件名：
```sh
$ git add README.md # 仅向暂存区添加README.md。
```

### d. 执行提交操作 (`git commit`)

为暂存区域的新或已修改的文件创建一个提交时，可以使用如下格式化的字符串作为此命令的一部分来指定此次更改的原因。这在追踪项目变更历史记录上将非常有用。

**示例：**
```sh
$ git commit -m "Initial Commit" # 提交所有被跟踪的文件到本地仓库。
```

### e. 查看 Git 状态 (`git status`)

通过 `git status`， 能够查看版本库的当前情况，即未跟踪、已修改和待提交的状态。

**示例：**
```sh
$ git status # 检验暂存和本地工作的内容状况。
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   README.md

no changes added to commit (use "git add" and/or "git checkout --" to update)
```

### f. 查看项目历史记录 (`git log`)

使用 `log` 命令，你可以查看项目的版本历史。它帮助我们了解何时更改了代码，并获取关于每一次修改的摘要信息，这在回溯项目的发展过程中非常有用。

**示例：**
```sh
$ git log # 检索最后一次Commit的所有细节。
commit e50461d73e8d8ecbf2feda3d9cbe7dfc01f8bfe0 (HEAD -> main, origin/main)
Author: Author Name <email@example.com>
Date:   Wed Aug 23 13:30:25 2022 +0530

    Initial Commit
```

在后续章节中，我们将继续深入了解如远程操作、分支管理和协作工作等功能。这些概念和命令是掌握 `git` 的基础并且非常关键的环节，为读者理解和构建更大的项目打下坚实的基础。
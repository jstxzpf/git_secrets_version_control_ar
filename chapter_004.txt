

4- 分支管理  
   a. 创建新分支(git branch, git checkout)
   b. 切换分支 
   c. 合并分支
   d. 删除分支
   

### 分支管理

在 Git 中，分支是项目开发过程中的一种基本机制。通过创建、切换和合并分支，开发人员可以更加灵活地组织代码的更新，并且更好地协作。本章将探讨如何使用 Git 创建新分支、进行分支之间的切换以及如何合并和删除分支。

#### 4.1 创建新分支

Git 中“创建新分支”可以通过 `git branch` 命令实现，该命令用于列出所有本地分支或根据所带参数来创建或列出新的分支。如果要仅查看当前的所有分支状态可以只执行不带参数的命令：

```
$ git branch
```

如果您想创建一个名为“feature”的新分支，只需输入下面指令:

```
$ git branch feature
```

这条语句只是在本地计算机内创造了一个新的分支对象，并未将头指针迁移到该分支。若要把工作目录切换到这个新分支，则需要使用如下命令：

```
$ git checkout feature
```

此外, Git 提供了方便的快捷方式，可同时创建并更改分支：

```
$ git checkout -b feature
```

这是一个常用的技巧，可以减少操作步骤。

在这个例子中，您可以将 "feature" 更改为与您正在开发的功能相关的内容。团队成员可以通过这种清晰的标记方式更容易地理解和管理项目代码库中的不同工作流。

#### 4.2 切换分支

要切换到已存在的不同分支上进行工作时，可以使用 `git checkout` 命令。例如, 在创建了名为“feature”的新分支后，可以通过如下方式将其设置为当前开发的分支：

```
$ git checkout feature
```

在新的分支上操作时，所有的提交将被标记在这个特定的分支之下，并且不会影响其他现存的分支机构。

#### 4.3 合并分支

在完成开发或修复问题之后，需要将其集成到主工作流中。“合并”分支通过将一个分支上的提交整合进另一个指定的分支来实现。假设已在“feature”分支完成了所有的工作，准备将其与master/main进行对接：

首先切换回主干分支:

```
$ git checkout main
```

然后执行合并操作:

``` 
$ git merge feature
```

在完成这个命令后，“main”的最新版本将包含被合并分支的所有变化内容。此外，如果存在冲突会提示并等待人工干预处理。

#### 4.4 删除分支

当完成了创建和切换之后，需要清理不再使用的旧有或测试的无关分支。可以通过下面的方式执行：

```
$ git branch -d feature
```

这将删除"feature" 分支；之前务必要合并所有相关改动到别的分支 (如：主干) 内。

#### 结论

本章介绍了基础的创建和使用新分支的技术，这些技术在进行软件项目开发时能够提升效率并帮助团队更好地协作。同时也能保证项目的稳定性和进度。学习掌握这部分知识有助于理解版本控制系统的核心理念，并为应对复杂的软件开发任务打下坚实的基础。